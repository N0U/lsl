#!/usr/bin/env python
# -*- python -*-
# vim: syntax=python
import time
### basis for the revision string
base_rev_major = "0."
base_rev = base_rev_major
master_repo = 'git://springlobby.info/git/buildbot/liblobby.git'
personal_repo = 'git://springlobby.info/git/%s/liblobby.git'
active_devs = ['BrainDamage','koshi']

c = BuildmasterConfig = {}
c['slaves'] = []
c['builders'] = []
c['schedulers'] = []
c['status'] = []

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
from spring import SpringNotifier

#import the pw vars from another file. this way we can keep config in git
import pw

#c['slaves'].append(BuildSlave("testbot", pw.my_pw, max_builds=1))
c['slaves'].append(BuildSlave("release-slave", pw.release_slave_pw, max_builds=1))
c['slaves'].append(BuildSlave("koshi-springlobby-slave", pw.koshi_springlobby_slave_pw, max_builds=1))
c['slaves'].append(BuildSlave("koshi-springlobby-slave2", pw.koshi_springlobby_slave2_pw, max_builds=1))
c['slaves'].append(BuildSlave("documentation", pw.documentation_pw, max_builds=1))
c['slaves'].append(BuildSlave("macosx1", pw.mac_pw, max_builds=1))
c['slavePortnum'] = 9888

### CONFIGS

commom_win_opts = " -DCMAKE_TOOLCHAIN_FILE:STRING=../cmake/Toolchain-mingw32_new.cmake -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DAUX_VERSION:STRING=msw -DCMAKE_EXE_LINKER_FLAGS:STRING=-L/opt/mingw32/lib -DCMAKE_CXX_FLAGS:STRING=-DNDEBUG "
no_opti  = " -DCMAKE_CXX_FLAGS:STRING=-O0 "
build_configs = dict() # name -> options_string
build_configs['msw-default']  = "" + commom_win_opts
build_configs['msw-no-torrent']  = ""  + commom_win_opts + no_opti
build_configs['msw-no-optionals']  = ""  + commom_win_opts + no_opti

build_configs['linux-default']  = "" + no_opti
build_configs['linux-no-torrent']  = "-DCMAKE_BUILD_TYPE=RELWITHDEBINFO" + no_opti
build_configs['linux-no-optionals']  = "-DCMAKE_BUILD_TYPE=PROFILE" + no_opti

common_mac_opts = "-DCMAKE_TOOLCHAIN_FILE:STRING=../cmake/Toolchain-osx.cmake"
build_configs['osx-default'] = ' ' + common_mac_opts
#builds with extra env file sourced
build_env_configs = dict() # name -> options_string
build_env_configs['gcc4.6-linux-default']  = "-DCMAKE_CXX_COMPILER=/opt/gcc4.6/bin/g++ -DCMAKE_C_COMPILER=/opt/gcc4.6/bin/gcc -DCMAKE_LINKER=/opt/gcc4.6/bin/ld" + no_opti
build_env_configs['clang-linux-default']  = "-DCMAKE_CXX_COMPILER=/opt/llvm/bin/clang++ -DCMAKE_C_COMPILER=/opt/llvm/bin/clang -DCMAKE_LINKER=/opt/llvm/bin/llvm-ld" + no_opti
env_builds = [ ]
env_builds.append( ( "/opt/gcc4.6.PATH", "gcc4.6-linux-default" ) )
env_builds.append( ( "/opt/llvm.PATH", "clang-linux-default" ) )

####### CHANGESOURCES

def changeIsImportant(change):
	for name in change.files:
		if (name.endswith('.cpp') or name.endswith('.c') or
		    name.endswith('.hpp') or name.endswith('.h') or
		    name.endswith('.inl') or name.endswith('CMakeLists.txt')):
			return True
	return False

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.basic  import Scheduler
from buildbot.schedulers import timed

for name in active_devs:
	c['schedulers'].append(Scheduler(
	      name="%s_Scheduler"%name,
	      change_filter=ChangeFilter(category_re = '.*%s.*'%name),
	      treeStableTimer=60,
	      fileIsImportant=changeIsImportant,
	      builderNames=[name,'%s-osx'%name]))
	#the osx build is delayed so trivial fails in the default builder may be corrected before it's started
	c['schedulers'].append(Scheduler(
	      name="%s-osx_Scheduler"%name,
	      change_filter=ChangeFilter(category_re = '.*%s.*'%name),
	      fileIsImportant=changeIsImportant,
	      treeStableTimer=6*60,
	      builderNames=['%s-osx'%name]))
c['schedulers'].append(timed.Nightly(
	name='nightly_sched',
	branch='master',
	fileIsImportant=changeIsImportant,
	onlyIfChanged=True,
	builderNames=["buildbot-osx"  ], hour=5, minute=0))

####### BUILDERS

# TODO: git-remote add -f my-public /srv/git/buildbot/springlobby.git is done for the release slave manually

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import Compile, ShellCommand, WithProperties

class BuildDocs(ShellCommand) :
	name = "execute doxygen"
	description = ["generating doxygen documentation"]
	descriptionDone = ["docs generated"]
	command = ["/bin/sh","./tools/update-docs.sh"]

class StripWindowsInstaller(ShellCommand) :
	name = "stripping installer files"
	description = ["stripping installer files"]
	descriptionDone = ["installer files stripped"]
	command = ["/opt/mingw32/bin/i586-pc-mingw32-strip","build-msw-default/*.exe" ]

class WindowsBinary(ShellCommand) :
	name = "windows binary"
	description = ["making windows binary"]
	descriptionDone = ["windows binary"]
	command = ["zip", "-jr", WithProperties("build-msw-default/libspringlobby-"+base_rev+"%(buildnumber)s-win32.zip"), "build-msw-default/wininst"]

class ReleaseWin(ShellCommand) :
	name = "release windows binary"
	description = ["releasing windows binary"]
	descriptionDone = ["windows binary release"]
	command = ["/usr/bin/install","-t", "/usr/local/www/springlobby.info/windows/", WithProperties("build-msw-default/libspringlobby-"+base_rev+"%(buildnumber)s-win32.zip")]

class ReleaseTarball(ShellCommand) :
	name = "release tarball"
	description = ["releasing tarball"]
	descriptionDone = ["tarball release"]
	command = ["/usr/bin/install", "-t", "/usr/local/www/springlobby.info/tarballs/", WithProperties("build-linux-default/libspringlobby-"+base_rev+"%(buildnumber)s.tar.gz"), WithProperties("build-linux-default/libspringlobby-"+base_rev+"%(buildnumber)s.tar.bz2")]

class RsyncStuff(ShellCommand) :
	name = "RSYNC stuff"
	description = ["rsycn tarball and windows zip"]
	descriptionDone = ["rsync done"]
	command =["rsync", "-lrvz", "/usr/local/www/springlobby.info/", "kosh@springlobby.info:/usr/local/www/springlobby.info/"]

class GitTag(ShellCommand) :
	name = "git tag"
	description = "git tagging"
	descriptionDone = "git tag"
	command = ["git","tag", "-a", "-m", WithProperties(base_rev+"%(buildnumber)s"),  WithProperties(base_rev+"%(buildnumber)s")]

class ReportNews(ShellCommand) :
	name = "report"
	description = "report"
	descriptionDone = "reported"
	command = ["/usr/bin/sl_report.py", WithProperties(base_rev+"%(buildnumber)s")]

class LatestZip(ShellCommand) :
	name = "latest zip"
	description = "latest zip"
	descriptionDone = "latest zip"
	command = ["/home/www-data/springlobby.info/windows/latest.sh", WithProperties(base_rev+"%(buildnumber)s")]

class PublishVersion(ShellCommand) :
	name = "publish version number"
	description = "publishing version"
	descriptionDone = "published version"
	command = ["/bin/bash", "-c", WithProperties("echo "+base_rev+"%(buildnumber)s > /usr/local/www/springlobby.info/version/lslcurrent.txt")]

class UploadBundle(ShellCommand) :
	name = "upload bundle"
	def __init__(self, configname='osx-default',who='buildbot',**kwargs):
		self.configname = configname
		self.who 		= who
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(who= who)
		self.description = "uploading bundle"
		self.descriptionDone = "uploaded bundle"
		self.command = ["/bin/bash", "./tools/upload-macosx-build.sh", "build-%s"%configname, self.who, WithProperties("%s","branch")]

class UploadTempBuild(ShellCommand) :
	name = "upload exe"
	def __init__(self, configname='linux-default',who='koshi',**kwargs):
		self.configname = configname
		self.who 		= who
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(who= who)
		self.description = "uploading exe"
		self.descriptionDone = "uploaded exe"
		self.command = ["/bin/bash", "./tools/upload-temp-win-build.sh", "build-%s"%configname, self.who, WithProperties("%s","branch")]

class UploadTempDebugBuild(ShellCommand) :
	name = "upload exe"
	def __init__(self, configname='linux-default',**kwargs):
		self.configname = configname
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.description = "uploading exe"
		self.descriptionDone = "uploaded exe"
		self.command = ["/bin/bash", "./tools/upload-temp-win-build_debug.sh", "build-%s"%configname, WithProperties("%s","branch")]

class AnnounceBuild(ShellCommand) :
	name = "announce"
	def __init__(self, who,**kwargs):
		self.who = who
		ShellCommand.__init__(self, **kwargs)
		self.addFactoryArguments(who= who)
		self.description = "announce build in #springlobby"
		self.descriptionDone = "announced"
		self.command = ["/usr/bin/sl_announce.py", who]

# common build config steps ---------------------------------------------@
class buildConfig(Compile):
	name = 'buildConfig'
	def __init__(self, configname='linux-default',jobs=1,release=False,**kwargs):
		self.configname = configname
		self.release = release
		Compile.__init__(self, **kwargs)
		self.haltOnFailure = True

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(jobs = jobs)
		self.addFactoryArguments(release= release)

		#self.name 			= self.configname + " build"
		self.description 	= ["building " + self.configname + " config"]
		self.descriptionDone	= ["built " + self.configname + " config"]
		if self.release:
			self.command		= ['make' ,'BUILDBOT_RELEASE=1','-k', '-j%d'%jobs, '-C', 'build-%s'%(self.configname)]
		else:
			self.command		= ['make' ,'-k', '-j%d'%jobs, '-C', 'build-%s'%(self.configname)]

class buildEnvConfig(Compile):
	name = 'buildConfig'
	def __init__(self, env_file,configname,jobs=1,release=False,**kwargs):
		self.configname = configname
		self.release = release
		self.env_file = env_file
		Compile.__init__(self, **kwargs)
		self.haltOnFailure = True

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(jobs = jobs)
		self.addFactoryArguments(release= release)
		self.addFactoryArguments(env_file= env_file)

		#self.name 			= self.configname + " build"
		self.description 	= ["building " + self.configname + " config"]
		self.descriptionDone	= ["built " + self.configname + " config"]
		if self.release:
			self.command		= ' '.join(['source', self.env_file, '&&', 'make' ,'BUILDBOT_RELEASE=1','-k', '-j%d'%jobs, '-C', 'build-%s'%(self.configname)])
		else:
			self.command		= ' '.join(['source', self.env_file, '&&', 'make' ,'-k', '-j%d'%jobs, '-C', 'build-%s'%(self.configname)])

# TODO fail and stop the build if this fails
class CreateBuildDir(ShellCommand) :
	name = "build dir create"

	def __init__(self, configname='linux-default',**kwargs):
		self.configname = configname
		ShellCommand.__init__(self, **kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.haltOnFailure = True

		self.description = ["creating dir %s"%(self.configname)]
		self.descriptionDone = ["%s dir created"%(self.configname)]
		self.command = ["/bin/bash", "./buildbot/create-build-dirs.sh", self.configname, WithProperties(base_rev+"%(buildnumber)s") , build_configs[self.configname]]
class CreateEnvBuildDir(ShellCommand) :
	name = "build dir create"

	def __init__(self, env_file,configname='linux-default',**kwargs):
		self.configname = configname
		self.env_file = env_file
		ShellCommand.__init__(self,**kwargs)

		#mandatory for later (automatic) re-creation of step object
		self.addFactoryArguments(configname = configname)
		self.addFactoryArguments(env_file= env_file)
		self.haltOnFailure = True

		self.description = ["creating dir %s"%(self.configname)]
		self.descriptionDone = ["%s dir created"%(self.configname)]
		self.command = ' '.join( ["source", self.env_file, "&&", "/bin/bash", "./buildbot/create-build-dirs.sh", self.configname, str(time.time()), build_env_configs[self.configname]] )
# common build config steps ---------------------------------------------@
JOBS='-j5'
ft = BuildFactory()
ft.addStep(Git(repourl=(master_repo)))
for i in ['linux-default','msw-default']:
	ft.addStep(CreateBuildDir(i))
	ft.addStep( buildConfig(configname=i,jobs=6,release=True) )
ft.addStep(Compile(command=["make", 'BUILDBOT_RELEASE=1',JOBS, "-k", "-C", "build-linux-default", "distcheck"]))
ft.addStep(Compile(command=["make", 'BUILDBOT_RELEASE=1',JOBS, "-C", "build-msw-default", "pack"]))
#ft.addStep(ReleaseTarball())
#ft.addStep(ReleaseWin())
#ft.addStep(GitTag())
# TODO of course this requires that someone manually set up git-remote my-public
#ft.addStep(ShellCommand(command=["git","push", "--tags", "my-public"]))
#ft.addStep(ShellCommand(command=["git","push", "my-public", "master"]))
#ft.addStep(StripWindowsInstaller())
#ft.addStep(WindowsInstaller())
#ft.addStep(PublishVersion())
#ft.addStep(UpdateRPM())
#ft.addStep(UpdateEbuild())
#ft.addStep(ReportNews())
#ft.addStep(LatestZip())


bt = {'name': "release",
      'slavenames': ["release-slave"],
      'builddir': "release",
      'factory': ft,
      }
c['builders'].append(bt)

f2 = BuildFactory()
f2.addStep(Git(repourl=(master_repo)))
f2.addStep(BuildDocs())

b2 = {'name': "docs",
      'slavename': "documentation",
      'builddir': "docs",
      'factory': f2,
      }
c['builders'].append(b2)

class FullBuildFactory(BuildFactory):
	def __init__(self,dude):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%dude))
		for name in set(build_configs.keys()) - set(['osx-default']):
			self.addStep( CreateBuildDir(name) )
			self.addStep( buildConfig(configname=name,jobs=6) )
		for env in env_builds:
			self.addStep( CreateEnvBuildDir(env[0],env[1]) )
			self.addStep( buildEnvConfig(env[0],env[1],jobs=6) )
		self.addStep(Compile(command=["make", "-j4","-C", "build-linux-default", "distcheck"]))
class TestBuildFactory(BuildFactory):
	def __init__(self,dude):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%dude))
		for env in env_builds:
			self.addStep( CreateEnvBuildDir(env[0],env[1]) )
			self.addStep( buildEnvConfig(env[0],env[1],jobs=6) )

class WinTempBuildFactory(BuildFactory):
	def __init__(self, who):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%who))
		self.addStep( CreateBuildDir('msw-default') )
		self.addStep( buildConfig(configname='msw-default',jobs=6) )
		self.addStep(UploadTempBuild(configname='msw-default',who=who  ))
		self.addStep(AnnounceBuild( who  ))

class WinTempDebugBuildFactory(BuildFactory):
	def __init__(self, who):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%who))
		self.addStep( CreateBuildDir('msw-default') )
		self.addStep( buildConfig(configname='msw-default',jobs=6) )
		self.addStep(UploadTempBuild(configname='msw-default',who=who  ))
		self.addStep(AnnounceBuild( who  ))

class OSXBuildFactory(BuildFactory):
	def __init__(self, who):
		BuildFactory.__init__(self)
		self.addStep(Git(repourl=personal_repo%who))
		self.addStep( CreateBuildDir('osx-default') )
		self.addStep( buildConfig(configname='osx-default',jobs=1) )
		self.addStep(UploadBundle(configname='osx-default',who=who  ))
		self.addStep(AnnounceBuild( who  ))
		
for name in active_devs:
	c['builders'].append({'name': name,
      'slavenames': ["release-slave"],
      'builddir': name,
      'factory': FullBuildFactory(name)
     })
	c['builders'].append({'name': name+'-win',
      'slavenames': ["release-slave"],
      'builddir': name+'-win',
      'factory': WinTempBuildFactory(name)
     })
	c['builders'].append({'name': name+'-osx',
      'slavenames': ["macosx1"],
      'builddir': name+'-osx',
      'factory': OSXBuildFactory(name)
     })
c['builders'].append({'name': 'buildbot-osx',
      'slavenames': ["macosx1"],
      'builddir': 'buildbot-osx',
      'factory': OSXBuildFactory('buildbot')
     })

class DummyFactory(BuildFactory):
	def __init__(self, who):
    		BuildFactory.__init__(self)
		self.addStep(Git(repourl=("git://springlobby.info/git/buildbot/springlobby.git")))

b00 = {'name': "dummy",
      'slavenames': ["release-slave"],
      'builddir': "dummy",
      'factory': DummyFactory("koshi")
     }
c['builders'].append(b00)    


####### STATUS TARGETS
from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import HTPasswdAuth
auth = (HTPasswdAuth('/home/buildbot/.htpasswd'))
authz = Authz(auth=auth,
	forceBuild='auth', # only authenticated users
	pingBuilder=True, # but anyone can do this
)
c['status'].append(WebStatus(http_port=8012, authz=authz))

#from buildbot.status import words
#c['status'].append(words.IRC(host="orwell.freenode.net", nick="springlobby",
#                             channels=["#springlobby"]))

from buildbot.status import client
c['status'].append(client.PBListener(9989))

from buildbot.status.mail import MailNotifier
#mn = MailNotifier(fromaddr="koshi@springlobby.info",builders=['release'],
#                       sendToInterestedUsers=False,
#                       extraRecipients=['releases@www.springlobby.info'])
bnames = ['koshi-win_dbg','dummy','koshi','release','docs','BrainDamage','bd-win',
	'koshi-full','koshi-win']
mn = SpringNotifier( builders=bnames,mode='all')
c['status'].append(mn)

####### DEBUGGING OPTIONS

#c['debugPassword'] = "debugpassword"
#c['manhole'] = buildbot.manhole.PasswordManhole("tcp:9999:interface=127.0.0.1", "admin", "password")

####### PROJECT IDENTITY

c['projectName'] = "libSpringLobby"
c['projectURL'] = "http://springlobby.info/"
c['buildbotURL'] = "http://lslbot.springlobby.info/"
